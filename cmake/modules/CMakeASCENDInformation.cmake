
if(UNIX)
    set(CMAKE_ASCEND_OUTPUT_EXTENSION .o)
else()
    set(CMAKE_ASCEND_OUTPUT_EXTENSION .obj)
endif()

set(CMAKE_INCLUDE_FLAG_ASCEND "-I")

# Set implicit links early so compiler-specific modules can use them.
set(__IMPLICIT_LINKS)

foreach(dir ${_CMAKE_ASCEND_HOST_IMPLICIT_LINK_DIRECTORIES})
    string(APPEND __IMPLICIT_LINKS " -L\"${dir}\"")
endforeach()

foreach(lib ${_CMAKE_ASCEND_HOST_IMPLICIT_LINK_LIBRARIES})
    if(${lib} MATCHES "/")
        string(APPEND __IMPLICIT_LINKS " \"${lib}\"")
    else()
        string(APPEND __IMPLICIT_LINKS " -l${lib}")
    endif()
endforeach()

foreach(dir ${_CMAKE_ASCEND_HOST_IMPLICIT_INCLUDE_DIRECTORIES})
    string(APPEND __IMPLICIT_INCLUDES " ${CMAKE_INCLUDE_FLAG_ASCEND}\"${dir}\"")
endforeach()

# Load compiler-specific information.
if(CMAKE_ASCEND_COMPILER_ID)
    include(Compiler/${CMAKE_ASCEND_COMPILER_ID} OPTIONAL)
endif()

include(CMakeCommonLanguageInclude)

set(CMAKE_ASCEND_FLAGS "-std=c++${CMAKE_CXX_STANDARD}")

if(DEFINED ENABLE_PRINT AND ENABLE_PRINT)
    string(APPEND CMAKE_ASCEND_FLAGS " --cce-enable-print")
endif()

if(DEFINED ASCEND_ENABLE_MSDEBUG AND ASCEND_ENABLE_MSDEBUG)
    set(CMAKE_ASCEND_FLAGS_DEBUG "-O0 -g")
else()
    set(CMAKE_ASCEND_FLAGS_DEBUG "-Xhost-start -O0 -g -Xhost-end -Xaicore-start -O2 -Xaicore-end")
endif()

set(CMAKE_ASCEND_FLAGS_RELEASE "-O2")

set(CMAKE_ASCEND_STANDARD ${CMAKE_CXX_STANDARD})

set(_INCLUDED_FILE 0)

set(CMAKE_SHARED_LIBRARY_ASCEND_FLAGS -fPIC)
set(CMAKE_SHARED_LIBRARY_CREATE_ASCEND_FLAGS --shared)
set(CMAKE_STATIC_LIBRARY_CREATE_ASCEND_FLAGS --cce-build-static-lib)
set(CMAKE_LIBRARY_CREATE_ASCEND_FLAGS --cce-fatobj-link)

# create a shared library
if(NOT CMAKE_ASCEND_CREATE_SHARED_LIBRARY)
    set(CMAKE_ASCEND_CREATE_SHARED_LIBRARY
        "<CMAKE_ASCEND_COMPILER> ${CMAKE_LIBRARY_CREATE_ASCEND_FLAGS} <CMAKE_SHARED_LIBRARY_ASCEND_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_ASCEND_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS>")
endif()

if(NOT CMAKE_ASCEND_CREATE_STATIC_LIBRARY)
    set(CMAKE_ASCEND_CREATE_STATIC_LIBRARY
        "<CMAKE_ASCEND_COMPILER> ${CMAKE_LIBRARY_CREATE_ASCEND_FLAGS} <CMAKE_SHARED_LIBRARY_ASCEND_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> ${CMAKE_STATIC_LIBRARY_CREATE_ASCEND_FLAGS} <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS>")
endif()

# create a shared module copy the shared library rule by default
if(NOT CMAKE_ASCEND_CREATE_SHARED_MODULE)
    set(CMAKE_ASCEND_CREATE_SHARED_MODULE ${CMAKE_ASCEND_CREATE_SHARED_LIBRARY})
endif()

if(NOT CMAKE_ASCEND_COMPILE_OBJECT)
    set(CMAKE_ASCEND_COMPILE_OBJECT
        "<CMAKE_ASCEND_COMPILER> -xcce <DEFINES> <INCLUDES>${__IMPLICIT_INCLUDES} ${_CMAKE_ASCEND_BUILTIN_INCLUDE_PATH} <FLAGS> ${_CMAKE_COMPILE_AS_ASCEND_FLAG} ${_CMAKE_ASCEND_COMPILE_OPTIONS} ${_CMAKE_ASCEND_COMMON_COMPILE_OPTIONS} <CMAKE_SHARED_LIBRARY_ASCEND_FLAGS> -pthread -o <OBJECT> -c <SOURCE>")
endif()

# compile a ascend cpp file into an executable
if(NOT CMAKE_ASCEND_LINK_EXECUTABLE)
    set(CMAKE_ASCEND_LINK_EXECUTABLE
        "<CMAKE_ASCEND_COMPILER> ${CMAKE_LIBRARY_CREATE_ASCEND_FLAGS} <FLAGS> <CMAKE_ASCEND_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>${__IMPLICIT_LINKS}")
endif()

# # These are used when linking relocatable (dc) Ascend code
# if(NOT CMAKE_ASCEND_DEVICE_LINK_LIBRARY)
# message(FATAL_ERROR "Do not support cmake link")
# endif()

# if(NOT CMAKE_ASCEND_DEVICE_LINK_EXECUTABLE)
# message(FATAL_ERROR "Do not support cmake link")
# endif()

# # Used when device linking is handled by CMake.
# if(NOT CMAKE_ASCEND_DEVICE_LINK_COMPILE)
# message(FATAL_ERROR "Do not support cmake link")
# endif()
set(CMAKE_ASCEND_INFORMATION_LOADED 1)
